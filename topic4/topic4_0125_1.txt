객체 지향 프로그래밍 
    
    - Object Oriented Programming, 객체와 클래스를 사용
    - 절차지향 vs 객체지향
        - 절차지향
            - 장점 : 작업의 구현 = 함수 / 함수의 집합 = 프로그램, 데이터는 작업의 실행을 위해 매개변수로 전달될 뿐, 코드 순서대로 프로그램이 진행
            - 단점 : tightly coupled, 데이터가 변하면 함수의 수정이 필요, 프로그램 규모가 커지면 이해하기 어렵고, 확장하기도 어려움, input데이터의 형태를 한번 정해놓으면 변경이 불가능 (오버로딩을 이용할 수는 있으나 귀찮음)
        
        - 객체지향 
            - 장점 : 함수형 프로그래밍, generic-meta 프로그래밍, 클래스와 객체를 기반 (데이터와 작업을 하나로 묶어서 표현)
                - 특징  
                    - 캡슐화 : 데이터와 작업을 하나로 묶는다 (데이터, 함수)
                    - 정보은닉 : 사용자는 내부 구현에 대해 모른다 (외부로 노출된 인터페이스만 사용 가능하게 된다)
                    - 상속, 다형성
